<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
        <title></title>
        <description> - Byronlee</description>
        <link>http://username.github.io</link>
        <link>http://username.github.io</link>
        <lastBuildDate>2014-05-22T10:06:28+00:00</lastBuildDate>
        <pubDate>2014-05-22T10:06:28+00:00</pubDate>
        <ttl>1800</ttl>


        <item>
                <title>Jquery_code_standard_summarize</title>
                <description>&lt;h1 id=&quot;jquery&quot;&gt;Jquery代码学习规范总结&lt;/h1&gt;

&lt;h3 id=&quot;&quot;&gt;提纲&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;如何开始Jquery代码&lt;/li&gt;

&lt;li&gt;如果为Jquery开发插件&lt;/li&gt;

&lt;li&gt;注意事项&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;jquery_2&quot;&gt;如何开始Jquery代码&lt;/h3&gt;

&lt;p&gt;我们常看见的代码的都开始如下：&lt;/p&gt;

&lt;pre class=&quot;js&quot;&gt;&lt;code class=&quot;js&quot;&gt;
(function($){
  ...
})(jQuery)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;实际上是匿名函数，不懂得朋友可以继续往下看。&lt;/p&gt;

&lt;p&gt;这里实际上是匿名函数&lt;/p&gt;

&lt;pre class=&quot;js&quot;&gt;&lt;code class=&quot;js&quot;&gt;
function(arg){...}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这就定义了一个匿名函数，参数为arg&lt;/p&gt;

&lt;p&gt;而调用函数时，是在函数后面写上括号和实参的，由于操作符的优先级，函数本身也需要用括号，即：&lt;/p&gt;

&lt;pre class=&quot;js&quot;&gt;&lt;code class=&quot;js&quot;&gt;
(function(arg){...})(param)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这就相当于定义了一个参数为arg的匿名函数，并且将param作为参数来调用这个匿名函数&lt;/p&gt;

&lt;p&gt;而&lt;code&gt;(function($){...})(jQuery)&lt;/code&gt;则是一样的，之所以只在形参使用$，是为了不与其他库冲突，所以实参用jQuery&lt;/p&gt;

&lt;p&gt;上面的代码与下面一样：&lt;/p&gt;

&lt;pre class=&quot;js&quot;&gt;&lt;code class=&quot;js&quot;&gt;
var fn = function($){....}; 
fn(jQuery); 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样写的好处在于：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;防止你在应用多个Jquery库的时候，各个库对$符号的定义不一样，这样可以有效的防止冲突&lt;/li&gt;

&lt;li&gt;将自己的Js代码放置在特定的作用域下，避免全局变量的混乱，引起不必要的麻烦&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;jquery_3&quot;&gt;如果为Jquery开发插件&lt;/h3&gt;

&lt;h4 id=&quot;extend&quot;&gt;首先来解读一个方法：extend&lt;/h4&gt;

&lt;p&gt;Jquery的扩展方法extend是我们在写插件的过程中常用的方法，该方法有一些重载原型，在此，我们一起去了解了解。&lt;/p&gt;

&lt;h5 id=&quot;jquery_4&quot;&gt;Jquery的扩展方法原型是:　　　&lt;/h5&gt;

&lt;pre class=&quot;js&quot;&gt;&lt;code class=&quot;js&quot;&gt;
 extend(dest,src1,src2,src3...);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;它的含义是将src1,src2,src3…合并到dest中,返回值为合并后的dest,由此可以看出该方法合并后，是修改了dest的结构的。如果想要得到合并的结果却又不想修改dest的结构，可以如下使用：&lt;/p&gt;

&lt;pre class=&quot;js&quot;&gt;&lt;code class=&quot;js&quot;&gt;
  var newSrc=$.extend({},src1,src2,src3...)//也就是将&amp;quot;{}&amp;quot;作为dest参数。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样就可以将src1,src2,src3…进行合并，然后将合并结果返回给newSrc了。如下例：&lt;/p&gt;

&lt;pre class=&quot;js&quot;&gt;&lt;code class=&quot;js&quot;&gt;
var result=$.extend({},{name:&amp;quot;Tom&amp;quot;,age:21},{name:&amp;quot;Jerry&amp;quot;,sex:&amp;quot;Boy&amp;quot;})
``` 
那么合并后的结果
```js
result={name:&amp;quot;Jerry&amp;quot;,age:21,sex:&amp;quot;Boy&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也就是说后面的参数如果和前面的参数存在相同的名称，那么后面的会覆盖前面的参数值。&lt;/p&gt;

&lt;h5 id=&quot;dest&quot;&gt;省略dest参数&lt;/h5&gt;

&lt;p&gt;上述的extend方法原型中的dest参数是可以省略的，如果省略了，则该方法就只能有一个src参数，而且是将该src合并到调用extend方法的对象中去，如：&lt;/p&gt;

&lt;pre class=&quot;js&quot;&gt;&lt;code class=&quot;js&quot;&gt;
 $.extend(src)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;该方法就是将src合并到jquery的全局对象中去，如：&lt;/p&gt;

&lt;pre class=&quot;js&quot;&gt;&lt;code class=&quot;js&quot;&gt;
 $.extend({
     hello:function(){alert('hello');}
  });
```  
就是将hello方法合并到jquery的全局对象中。

_[注意]_ ```$.fn.extend(src)```　该方法将src合并到jquery的实例对象中去，如:

```js
 $.fn.extend({
    hello:function(){alert('hello');}
 });
``` 

就是将hello方法合并到jquery的实例对象中。

下面例举几个常用的扩展实例：
```js
  $.extend({net:{}});
``` 
这是在jquery全局对象中扩展一个net命名空间。
```js
  $.extend($.net,{
   hello:function(){alert('hello');}
  })
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这是将hello方法扩展到之前扩展的Jquery的net命名空间中去。&lt;/p&gt;

&lt;h5 id=&quot;jqueryextend&quot;&gt;Jquery的extend方法还有一个重载原型：&lt;/h5&gt;

&lt;pre class=&quot;js&quot;&gt;&lt;code class=&quot;js&quot;&gt;
extend(boolean,dest,src1,src2,src3...)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第一个参数boolean代表是否进行深度拷贝，其余参数和前面介绍的一致，什么叫深层拷贝，我们看一个例子：&lt;/p&gt;

&lt;pre class=&quot;js&quot;&gt;&lt;code class=&quot;js&quot;&gt;
var result=$.extend( true,  {},  
    { name: &amp;quot;John&amp;quot;, location: {city: &amp;quot;Boston&amp;quot;,county:&amp;quot;USA&amp;quot;} },  
    { last: &amp;quot;Resig&amp;quot;, location: {state: &amp;quot;MA&amp;quot;,county:&amp;quot;China&amp;quot;} } ); 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们可以看出src1中嵌套子对象&lt;code&gt;location:{city:&amp;quot;Boston&amp;quot;},src2&lt;/code&gt;中也嵌套子对象&lt;code&gt;location:{state:&amp;quot;MA&amp;quot;}&lt;/code&gt;,第一个深度拷贝参数为true，那么合并后的结果就是：&lt;/p&gt;

&lt;pre class=&quot;js&quot;&gt;&lt;code class=&quot;js&quot;&gt;
result={name:&amp;quot;John&amp;quot;,last:&amp;quot;Resig&amp;quot;,
        location:{city:&amp;quot;Boston&amp;quot;,state:&amp;quot;MA&amp;quot;,county:&amp;quot;China&amp;quot;}}
``` 
也就是说它会将src中的嵌套子对象也进行合并，而如果第一个参数boolean为false，我们看看合并的结果是什么，如下：
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;var result=$.extend( false, {},&lt;br /&gt; { name: “John”, location:{city: “Boston”,county:”USA”} },&lt;br /&gt; { last: “Resig”, location: {state: “MA”,county:”China”} }&lt;br /&gt; );&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
那么合并后的结果就是:
```js
result={name:&amp;quot;John&amp;quot;,last:&amp;quot;Resig&amp;quot;,location:{state:&amp;quot;MA&amp;quot;,county:&amp;quot;China&amp;quot;}}
``` 
以上就是$.extend()在项目中经常会使用到的一些细节。

#### jQuery为开发插件提拱了两个方法，分别是：

* ```jQuery.fn.extend(object);```
* ```jQuery.extend(object);```

其中,通过上面所了解，可以知道：
 
* jQuery.extend(object); 为扩展jQuery类本身.为类添加新的方法。

* jQuery.fn.extend(object); 给jQuery对象添加方法。

fn 是什么东西呢。查看jQuery代码，就不难发现。
```js
jQuery.fn = jQuery.prototype = {
  init: function( selector, context ) {//....　
  //......
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;原来 &lt;code&gt;jQuery.fn = jQuery.prototype.&lt;/code&gt;对prototype肯定不会陌生啦。&lt;/p&gt;

&lt;p&gt;虽然 javascript　没有明确的类的概念，但是用类来理解它，会更方便。&lt;/p&gt;

&lt;p&gt;jQuery便是一个封装得非常好的类，比如我们用 语句　$(“#btn1”) 会生成一个 jQuery类的实例。&lt;/p&gt;

&lt;p&gt;jQuery.extend(object);　为jQuery类添加添加类方法，可以理解为添加静态方法。如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
$.extend({

　　add:function(a,b){return a+b;}

});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;便为　jQuery　添加一个为 add　的　“静态方法”，之后便可以在引入 jQuery　的地方，使用这个方法了，&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
$.add(3,4); //return 7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;jQuery.fn.extend(object); 对jQuery.prototype&lt;/code&gt;进得扩展，就是为jQuery类添加“成员函数”。jQuery类的实例可以使用这个“成员函数”。&lt;/p&gt;

&lt;p&gt;比如我们要开发一个插件，做一个特殊的编辑框，当它被点击时，便alert 当前编辑框里的内容。可以这么做：&lt;/p&gt;

&lt;pre class=&quot;js&quot;&gt;&lt;code class=&quot;js&quot;&gt;
$.fn.extend({        
        
   alertWhileClick:function(){        
       
       $(this).click(function(){        
       
            alert($(this).val());        
        });        
        
    }        
        
});        
        
$(&amp;quot;#input1&amp;quot;).alertWhileClick(); //页面上为：&amp;lt;input id=&amp;quot;input1&amp;quot; type=&amp;quot;text&amp;quot;/&amp;gt;    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;$(“#input1”)　为一个jQuery实例，当它调用成员方法 alertWhileClick后，便实现了扩展，每次被点击时它会先弹出目前编辑里的内容。&lt;/p&gt;

&lt;p&gt;真实的开发过程中，当然不会做这么小白的插件，事实上jQuery提拱了丰富的操作文档，事件，CSS ,Ajax、效果的方法，结合这些方法，便可以开发出更加 Niubility 的插件。&lt;/p&gt;

&lt;h3 id=&quot;_2&quot;&gt;注意事项&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;jQuery(function(){ });&lt;/code&gt;全写为&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
  jQuery(document).ready(function(){ 
    
}); 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;意义为在DOM加载完毕后执行了ready()方法。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;jQuery(function(){　});用于存放操作DOM对象的代码，执行其中代码时DOM对象已存在。不可用于存放开发插件的代码，因为jQuery对象没有得到传递，外部通过jQuery.method也调用不了其中的方法（函数）。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;(function(){　})(jQuery)；用于存放开发插件的代码，执行其中代码时DOM不一定存在，所以直接自动执行DOM操作的代码请小心使用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
                <link>http://username.github.io/2014/04/11/Jquery_code_standard_summarize</link>
                <guid>http://username.github.io/2014/04/11/Jquery_code_standard_summarize</guid>
                <pubDate>2014-04-11T00:00:00+00:00</pubDate>
        </item>


</channel>
</rss>
